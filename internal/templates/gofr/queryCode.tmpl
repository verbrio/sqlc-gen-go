{{define "queryCodeGofr"}}
{{range .GoQueries}}
{{if $.OutputQuery .SourceName}}
{{if and (ne .Cmd ":copyfrom") (ne (hasPrefix .Cmd ":batch") true)}}
const {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}}
{{end}}

{{if ne (hasPrefix .Cmd ":batch") true}}
{{if .Arg.EmitStruct}}
type {{.Arg.Type}} struct { {{- range .Arg.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} struct { {{- range .Ret.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}
{{end}}

{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx *gofr.Context, {{.Arg.Pair}}) ({{.Ret.DefineType}}, error) {
	row := ctx.SQL.QueryRowContext(ctx, {{.ConstantName}}, {{.Arg.Params}})
	{{- if or (ne .Arg.Pair .Ret.Pair) (ne .Arg.DefineType .Ret.DefineType) }}
	var {{.Ret.Name}} {{.Ret.Type}}
	{{- end}}
	err := row.Scan({{.Ret.Scan}})
	return {{.Ret.ReturnName}}, err
}
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx *gofr.Context, {{.Arg.Pair}}) ([]{{.Ret.DefineType}}, error) {
	rows, err := ctx.SQL.QueryContext(ctx, {{.ConstantName}}, {{.Arg.Params}})
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	{{- if $.EmitEmptySlices}}
	items := []{{.Ret.DefineType}}{}
	{{else}}
	var items []{{.Ret.DefineType}}
	{{end -}}
	for rows.Next() {
		var {{.Ret.Name}} {{.Ret.Type}}
		if err := rows.Scan({{.Ret.Scan}}); err != nil {
			return nil, err
		}
		items = append(items, {{.Ret.ReturnName}})
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx *gofr.Context, {{.Arg.Pair}}) error {
	_, err := ctx.SQL.ExecContext(ctx, {{.ConstantName}}, {{.Arg.Params}})
	return err
}
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx *gofr.Context, {{.Arg.Pair}}) (int64, error) {
	result, err := ctx.SQL.ExecContext(ctx, {{.ConstantName}}, {{.Arg.Params}})
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx *gofr.Context, {{.Arg.Pair}}) (sql.Result, error) {
	return ctx.SQL.ExecContext(ctx, {{.ConstantName}}, {{.Arg.Params}})
}
{{end}}

{{if eq .Cmd ":execlastid"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx *gofr.Context, {{.Arg.Pair}}) (int64, error) {
	result, err := ctx.SQL.ExecContext(ctx, {{.ConstantName}}, {{.Arg.Params}})
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}
{{end}}

{{if eq .Cmd ":copyfrom"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx *gofr.Context, {{.Arg.SlicePair}}) (int64, error) {
	// GoFr doesn't support native bulk copy operations
	// Consider implementing bulk insert with batch SQL statements
	return 0, fmt.Errorf("copyfrom not supported for GoFr integration")
}
{{end}}

{{if hasPrefix .Cmd ":batch"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx *gofr.Context, {{.Arg.SlicePair}}) *{{.MethodName}}BatchResults {
	// GoFr doesn't have native batch support like PGX
	// This is a placeholder that needs custom implementation
	return &{{.MethodName}}BatchResults{}
}
{{end}}

{{end}}
{{end}}
{{end}}